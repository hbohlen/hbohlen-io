{ config, pkgs, lib, ... }:

{
  imports = [
    # Import the previously created disko configuration
    ./disko.nix

    # Import the NixOS hardware configuration (usually generated by nixos-generate-config)
    # This will contain hardware-specific settings like bootloader, file systems, etc.
    # For now, we'll assume it will be generated later or manually added.
    # <nixpkgs/nixos/modules/installer/scan/not-detected.nix> # Placeholder

    # Import home-manager module
    # home-manager.nixosModules.home-manager
  ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Networking
  networking.hostName = "laptop"; # Define your hostname

  # Timezone
  time.timeZone = "America/New_York"; # Adjust to your timezone

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  # services.xserver.displayManager.gdm.enable = true;
  # services.xserver.desktopManager.gnome.enable = true;

  # Configure keymap in X11 (here US Dvorak).
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e,caps:escape";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  services.pipewire.enable = true;

  # Enable touchpad support (libinput needs to be enabled for touchpad to work).
  services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.hbohlen = {
    isNormalUser = true;
    extraGroups = [ "wheel" "networkmanager" "input" ]; # Add input group for some hardware
    # shell = pkgs.zsh; # Example: set default shell
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search nixpkgs something
  environment.systemPackages = with pkgs; [
    vim # Do not forget to add a editor to be able to edit configuration.nix!
    wget
    git
    # Add other essential packages here
  ];

  # Some programs need a bit of help to get their plugins working.
  # programs.dconf.enable = true;

  # List services that you want to enable and start on system boot.
  # services.udev.extraRules = ''
  #   # Example rule for Intel VMD (replace with actual rule if needed)
  #   ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x8086", ATTR{device}=="0x9a0b", RUN+="/usr/bin/vmd-setup"
  # '';

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # by default, are appealed to.
  #
  # Unused config values like this one should be removed:
  # `config.system.stateVersion`
  system.stateVersion = "24.05"; # Did you read the comment?

  # The following are placeholders for hardware-specific configurations
  # that would typically be generated by `nixos-generate-config` or
  # manually added to address Intel VMD, NVIDIA, and battery issues.
  # These will need to be filled in based on the actual laptop hardware.

  # Example for Intel VMD (Virtual RAID on CPU)
  # boot.initrd.kernelModules = [ "vmd" ];
  # boot.extraModprobeConfig = ''
  #   options vmd disable_vmd=0
  # '';

  # Example for NVIDIA graphics
  # services.xserver.videoDrivers = [ "nvidia" ];
  # hardware.nvidia.modesetting.enable = true;
  # hardware.nvidia.powerManagement.enable = true;
  # hardware.nvidia.open = false; # Use proprietary driver

  # Example for battery optimization (e.g., TLP)
  # services.tlp.enable = true;
}